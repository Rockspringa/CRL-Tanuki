/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,10,16,17,26,27,33,82,83,94],$V1=[6,17,26,27,33,82,83,94],$V2=[1,24],$V3=[1,26],$V4=[1,23],$V5=[1,25],$V6=[1,22],$V7=[14,30,34],$V8=[2,91],$V9=[1,34],$Va=[1,45],$Vb=[1,48],$Vc=[1,50],$Vd=[1,46],$Ve=[1,47],$Vf=[1,49],$Vg=[1,51],$Vh=[1,52],$Vi=[1,53],$Vj=[1,56],$Vk=[23,30],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[14,23,30,36,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VC=[14,23,30,36,65,66,67,68,69,70],$VD=[1,102],$VE=[14,23,30,36,65,66],$VF=[14,23,30,36,65,66,67,68,69],$VG=[1,117],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,118],$VL=[17,27,32,33,40,42,48,60,82,83,94],$VM=[1,148],$VN=[1,167],$VO=[1,165],$VP=[1,166],$VQ=[17,27,32,33,40,42,48,60,82,83,92,93,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"header":4,"body":5,"EOF":6,"header_repetition0":7,"header_option0":8,"import":9,"IMPORTAR":10,"ID[id1]":11,".":12,"ID[id2]":13,"\\n":14,"incerteza":15,"INCERTEZA":16,"DOUBLE":17,"body_repetition0":18,"func_declaration":19,"declaration":20,"(":21,"func_declaration_option0":22,")":23,":":24,"block":25,"VOID":26,"ID":27,"func_declaration_option1":28,"func_param":29,",":30,"for":31,"PARA":32,"INT":33,"=":34,"value":35,";":36,"for_group0":37,"loop_block":38,"while":39,"MIENTRAS":40,"if":41,"SI":42,"if_option0":43,"loop_if":44,"loop_if_option0":45,"\\t":46,"block_repetition_plus0":47,"!\\t":48,"instruccion":49,"instruccion_group0":50,"loop_block_repetition_plus0":51,"loop_instruccion":52,"loop_instruccion_group0":53,"var_declaration":54,"var_declaration_repetition0":55,"var_declaration_option0":56,"assign":57,"type":58,"return":59,"RETORNO":60,"return_option0":61,"function":62,"function_option0":63,"func_values":64,"+":65,"-":66,"*":67,"/":68,"%":69,"^":70,"!=":71,"<=":72,">=":73,"==":74,"<":75,">":76,"~":77,"&&":78,"||":79,"|&":80,"!":81,"STRING":82,"CHAR":83,"TRUE":84,"FALSE":85,"type_group0":86,"body_repetition0_group0_group0":87,"body_repetition0_group0":88,"++":89,"--":90,"SINO":91,"DETENER":92,"CONTINUAR":93,"BOOLEAN":94,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",10:"IMPORTAR",11:"ID[id1]",12:".",13:"ID[id2]",14:"\\n",16:"INCERTEZA",17:"DOUBLE",21:"(",23:")",24:":",26:"VOID",27:"ID",30:",",32:"PARA",33:"INT",34:"=",36:";",40:"MIENTRAS",42:"SI",46:"\\t",48:"!\\t",60:"RETORNO",65:"+",66:"-",67:"*",68:"/",69:"%",70:"^",71:"!=",72:"<=",73:">=",74:"==",75:"<",76:">",77:"~",78:"&&",79:"||",80:"|&",81:"!",82:"STRING",83:"CHAR",84:"TRUE",85:"FALSE",89:"++",90:"--",91:"SINO",92:"DETENER",93:"CONTINUAR",94:"BOOLEAN"},
productions_: [0,[3,3],[4,2],[9,5],[15,3],[5,1],[19,6],[19,7],[29,3],[29,1],[31,13],[39,6],[41,7],[44,7],[25,4],[49,2],[38,4],[52,2],[54,3],[57,3],[20,2],[59,2],[62,4],[64,3],[64,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[58,1],[7,0],[7,2],[8,0],[8,1],[87,1],[87,1],[88,1],[88,2],[18,0],[18,2],[22,0],[22,1],[28,0],[28,1],[37,1],[37,1],[43,0],[43,3],[45,0],[45,3],[47,1],[47,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[51,1],[51,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[55,0],[55,3],[56,0],[56,2],[61,0],[61,1],[63,0],[63,1],[86,1],[86,1],[86,1],[86,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
this.$ = yy.parseImport(`${$$[$0-3]}.${$$[$0-1]}`, _$[$0-4].first_column, _$[$0-4].first_line);;
break;
case 20:
this.$ = [$$[$0-1], $$[$0]];
break;
case 50:
this.$ = $$[$0];
break;
case 51: case 59: case 91:
this.$ = [];
break;
case 52: case 60: case 72: case 81:
$$[$0-1].push($$[$0]);
break;
case 71: case 80:
this.$ = [$$[$0]];
break;
case 92:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,51],{3:1,4:2,7:3}),{1:[3]},o($V1,[2,59],{5:4,18:5}),o($V1,[2,53],{8:6,9:7,15:8,10:[1,9],16:[1,10]}),{6:[1,11]},{6:[2,5],17:$V2,19:13,20:15,26:[1,16],27:[1,20],33:$V3,54:17,57:18,58:19,82:$V4,83:$V5,86:21,87:14,88:12,94:$V6},o($V1,[2,2]),o($V0,[2,52]),o($V1,[2,54]),{27:[1,27]},{17:[1,28]},{1:[2,1]},o($V1,[2,60]),o($V1,[2,57]),{14:[1,29]},o($V7,$V8,{55:31,21:[1,30]}),{27:[1,32]},{14:[2,55]},{14:[2,56]},{27:[1,33]},{34:$V9},{27:[2,50]},{27:[2,99]},{27:[2,100]},{27:[2,101]},{27:[2,102]},{27:[2,103]},{12:[1,35]},{14:[1,36]},o($V1,[2,58]),{17:$V2,20:39,22:37,23:[2,61],29:38,33:$V3,58:19,82:$V4,83:$V5,86:21,94:$V6},{14:[2,93],30:[1,41],34:[1,42],56:40},{21:[1,43]},o([14,21,23,30,34],[2,20]),{21:$Va,27:$Vb,33:$Vc,35:44,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{27:[1,54]},o($V1,[2,4]),{23:[1,55]},{23:[2,62],30:$Vj},o($Vk,[2,9]),{14:[2,18]},{27:[1,57]},{21:$Va,27:$Vb,33:$Vc,35:58,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{17:$V2,20:39,23:[2,63],28:59,29:60,33:$V3,58:19,82:$V4,83:$V5,86:21,94:$V6},{14:[2,19],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{21:$Va,27:$Vb,33:$Vc,35:77,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:78,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:79,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),{14:[1,80]},{24:[1,81]},{17:$V2,20:82,33:$V3,58:19,82:$V4,83:$V5,86:21,94:$V6},o($V7,[2,92]),{14:[2,94],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{23:[1,83]},{23:[2,64],30:$Vj},{21:$Va,27:$Vb,33:$Vc,35:84,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:85,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:86,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:87,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:88,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:89,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:90,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:91,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:92,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:93,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:94,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:95,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:96,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:97,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:98,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:99,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{23:[1,100],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},o($VC,[2,42],{71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VB,[2,43]),o($V0,[2,3]),{14:$VD,25:101},o($Vk,[2,8]),{24:[1,103]},o($VE,[2,26],{67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VE,[2,27],{67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VF,[2,28],{70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VF,[2,29],{70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VF,[2,30],{70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VF,[2,31],{70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),o($VC,[2,32],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,33],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,34],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,35],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,36],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,37],{78:$Vy,79:$Vz,80:$VA}),o($VC,[2,38],{78:$Vy,79:$Vz,80:$VA}),o($VB,[2,39]),o([14,23,30,36,65,66,67,68,69,70,71,72,73,74,75,76,77,79],[2,40],{78:$Vy,80:$VA}),o([14,23,30,36,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80],[2,41],{78:$Vy}),o($VB,[2,25]),o($V1,[2,6]),{46:[1,104]},{14:$VD,25:105},{17:$V2,20:116,27:$VG,31:112,32:$VH,33:$V3,39:113,40:$VI,41:114,42:$VJ,47:106,49:107,50:108,54:109,57:110,58:19,59:111,60:$VK,62:115,82:$V4,83:$V5,86:21,94:$V6},o($V1,[2,7]),{17:$V2,20:116,27:$VG,31:112,32:$VH,33:$V3,39:113,40:$VI,41:114,42:$VJ,48:[1,122],49:123,50:108,54:109,57:110,58:19,59:111,60:$VK,62:115,82:$V4,83:$V5,86:21,94:$V6},o($VL,[2,71]),{14:[1,124]},{14:[2,73]},{14:[2,74]},{14:[2,75]},{14:[2,76]},{14:[2,77]},{14:[2,78]},{14:[2,79]},o($V7,$V8,{55:31}),{21:[1,125],34:$V9},{14:[2,95],21:$Va,27:$Vb,33:$Vc,35:127,61:126,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:[1,128]},{21:[1,129]},{21:[1,130]},o([6,14,17,26,27,33,82,83,91,94],[2,14]),o($VL,[2,72]),o($VL,[2,15]),{21:$Va,23:[2,97],27:$Vb,33:$Vc,35:133,63:131,64:132,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{14:[2,21]},{14:[2,96],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{33:[1,134]},{21:$Va,27:$Vb,33:$Vc,35:135,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{21:$Va,27:$Vb,33:$Vc,35:136,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{23:[1,137]},{23:[2,98],30:[1,138]},o($Vk,[2,24],{65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),{27:[1,139]},{23:[1,140],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{23:[1,141],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{14:[2,22]},{21:$Va,27:$Vb,33:$Vc,35:142,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{34:[1,143]},{24:[1,144]},{24:[1,145]},o($Vk,[2,23],{65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA}),{21:$Va,27:$Vb,33:$Vc,35:146,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{14:$VM,38:147},{14:$VD,25:149},{36:[1,150],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{14:[2,11]},{46:[1,151]},{14:[2,67],43:152,91:[1,153]},{21:$Va,27:$Vb,33:$Vc,35:154,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{17:$V2,20:116,27:$VG,31:161,32:$VH,33:$V3,39:162,40:$VI,42:$VN,44:163,51:155,52:156,53:157,54:158,57:159,58:19,59:160,60:$VK,62:164,82:$V4,83:$V5,86:21,92:$VO,93:$VP,94:$V6},{14:[2,12]},{24:[1,168]},{36:[1,169],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{17:$V2,20:116,27:$VG,31:161,32:$VH,33:$V3,39:162,40:$VI,42:$VN,44:163,48:[1,170],52:171,53:157,54:158,57:159,58:19,59:160,60:$VK,62:164,82:$V4,83:$V5,86:21,92:$VO,93:$VP,94:$V6},o($VQ,[2,80]),{14:[1,172]},{14:[2,82]},{14:[2,83]},{14:[2,84]},{14:[2,85]},{14:[2,86]},{14:[2,87]},{14:[2,88]},{14:[2,89]},{14:[2,90]},{21:[1,173]},{14:$VD,25:174},{37:175,89:[1,176],90:[1,177]},o([14,91],[2,16]),o($VQ,[2,81]),o($VQ,[2,17]),{21:$Va,27:$Vb,33:$Vc,35:178,66:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi},{14:[2,68]},{23:[1,179]},{23:[2,65]},{23:[2,66]},{23:[1,180],65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA},{24:[1,181]},{24:[1,182]},{14:$VM,38:183},{14:$VM,38:184},{14:[2,10]},{14:[2,69],45:185,91:[1,186]},{14:[2,13]},{24:[1,187]},{14:$VM,38:188},{14:[2,70]}],
defaultActions: {11:[2,1],17:[2,55],18:[2,56],21:[2,50],22:[2,99],23:[2,100],24:[2,101],25:[2,102],26:[2,103],40:[2,18],109:[2,73],110:[2,74],111:[2,75],112:[2,76],113:[2,77],114:[2,78],115:[2,79],126:[2,21],137:[2,22],147:[2,11],152:[2,12],158:[2,82],159:[2,83],160:[2,84],161:[2,85],162:[2,86],163:[2,87],164:[2,88],165:[2,89],166:[2,90],174:[2,68],176:[2,65],177:[2,66],183:[2,10],185:[2,13],188:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const addError = (message, type = 1, column = this.first_column, line = this.first_line) =>
    yy.errorsTable.addError({ message, type, column, line });

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

const indent = [0];

const addDedents = (tabs, token) => {
  const dedents = [...token];

  if (token && tabs < indent[0]) dedents.unshift('\n');
  
  while (tabs < indent[0]) {
    dedents.unshift('!\t');
    indent.shift();
  }

  if (dedents.length) return dedents;
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:
                      const tabs = yy_.yytext.length;

                      if (tabs > indent[0]) {
                          indent.unshift(tabs);
                          return ['\t', '\n'];
                      }

                      return addDedents(tabs, ['\n']);
                   
break;
case 3:this.popState();
break;
case 4:this.popState();
break;
case 5:/* ignore */
break;
case 6:return 94;
break;
case 7:return 82;
break;
case 8:return 17;
break;
case 9:return 83;
break;
case 10:return 26;
break;
case 11:return 33;
break;
case 12:return 26;
break;
case 13:return 85;
break;
case 14:return 84;
break;
case 15:return 60;
break;
case 16:return 42;
break;
case 17:return 91;
break;
case 18:return 32;
break;
case 19:return 40;
break;
case 20:return 92;
break;
case 21:return 93;
break;
case 22:return 'MOSTRAR';
break;
case 23:return 10;
break;
case 24:return 16;
break;
case 25:return 89;
break;
case 26:return 90;
break;
case 27:return 65;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 68;
break;
case 31:return 69;
break;
case 32:return 70;
break;
case 33:return 71;
break;
case 34:return 72;
break;
case 35:return 73;
break;
case 36:return 74;
break;
case 37:return 75;
break;
case 38:return 76;
break;
case 39:return 77;
break;
case 40:return 78;
break;
case 41:return 79;
break;
case 42:return 80;
break;
case 43:return 81;
break;
case 44:return 34;
break;
case 45:return 30;
break;
case 46:return 23;
break;
case 47:return 21;
break;
case 48:return 24;
break;
case 49:return 12;
break;
case 50:return 36;
break;
case 51:return 14;
break;
case 52:return addDedents(0, ['\n']);
break;
case 53:this.begin('string');
break;
case 54:this.popState();
break;
case 55:return '_STRING';
break;
case 56:addError(`Se ingreso un salto de linea antes de cerrar el string.`, 0); return addDedents(0, ['EOF']);
break;
case 57:addError(`No se cerro la especificacion del string.`, 0); return addDedents(0, ['EOF']);
break;
case 58:this.begin('char');
break;
case 59:this.popState();
break;
case 60:return '_CHAR';
break;
case 61:return '_CHAR';
break;
case 62:addError(`Se ingreso un salto de linea en lugar de un caracter.`, 0); return addDedents(0, ['EOF']);
break;
case 63:addError(`No se termino la especificacion del caracter.`, 0); return addDedents(0, ['EOF']);
break;
case 64:return '_DOUBLE';
break;
case 65:return '_INT';
break;
case 66:return 27;
break;
case 67:return addDedents(0, ['EOF']);
break;
case 68:addError(`Token desconocido <<${yy_.yytext}>>.`, 0);
break;
}
},
rules: [/^(?:([ \r]|\b[ \t]+))/,/^(?:(!![^\n]*(\n|$)))/,/^(?:(\n\t+(?!([ ]*([\r\n]+|$)))))/,/^(?:                this\.begin\(comment\);\r\n<comment>)/,/^(?:$)/,/^(?:.)/,/^(?:\bBoolean\b)/,/^(?:\bString\b)/,/^(?:\bDouble\b)/,/^(?:\bChar\b)/,/^(?:\bVoid\b)/,/^(?:\bInt\b)/,/^(?:\bVoid\b)/,/^(?:\bfalse\b)/,/^(?:\btrue\b)/,/^(?:\bRetorno\b)/,/^(?:\bSi\b)/,/^(?:\bSino\b)/,/^(?:\bPara\b)/,/^(?:\bMientras\b)/,/^(?:\bDetener\b)/,/^(?:\bContinuar\b)/,/^(?:\bMostrar\b)/,/^(?:\bImportar\b)/,/^(?:\bincerteza\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:% )/,/^(?:\^)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:\n([ \t]*\n)*)/,/^(?:\n\b)/,/^(?:["])/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:\n)/,/^(?:$)/,/^(?:['])/,/^(?:['])/,/^(?:[^'\n])/,/^(?:[^'\n])/,/^(?:\n)/,/^(?:$)/,/^(?:((-?([1-9]\d+|\d))\.\d+))/,/^(?:(-?([1-9]\d+|\d)))/,/^(?:([a-zA-Z_$ñ][\w$ñ]+))/,/^(?:$)/,/^(?:.)/],
conditions: {"char":{"rules":[0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"string":{"rules":[0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68],"inclusive":true},"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,64,65,66,67,68],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crlParser;
exports.Parser = crlParser.Parser;
exports.parse = function () { return crlParser.parse.apply(crlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}