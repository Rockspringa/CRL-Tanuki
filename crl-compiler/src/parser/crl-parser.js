/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,10,15,16,25,31,80,81,91],$V1=[6,16,25,31,80,81,91],$V2=[1,21],$V3=[1,23],$V4=[1,20],$V5=[1,22],$V6=[1,19],$V7=[13,28,32],$V8=[2,89],$V9=[1,42],$Va=[22,28],$Vb=[1,48],$Vc=[1,45],$Vd=[1,50],$Ve=[1,46],$Vf=[1,47],$Vg=[1,49],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[13,22,28,34,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VB=[1,80],$VC=[13,22,28,34,63,64,65,66,67,68],$VD=[13,22,28,34,63,64],$VE=[13,22,28,34,63,64,65,66,67],$VF=[1,112],$VG=[1,114],$VH=[1,115],$VI=[1,116],$VJ=[1,113],$VK=[11,16,30,31,38,40,46,58,80,81,91],$VL=[1,145],$VM=[1,164],$VN=[1,162],$VO=[1,163],$VP=[11,16,30,31,38,40,46,58,80,81,89,90,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"header":4,"body":5,"EOF":6,"header_repetition0":7,"header_option0":8,"import":9,"IMPORTAR":10,"ID":11,".":12,"\\n":13,"incerteza":14,"INCERTEZA":15,"DOUBLE":16,"body_repetition0":17,"func_declaration":18,"declaration":19,"(":20,"func_declaration_option0":21,")":22,":":23,"block":24,"VOID":25,"func_declaration_option1":26,"func_param":27,",":28,"for":29,"PARA":30,"INT":31,"=":32,"value":33,";":34,"for_group0":35,"loop_block":36,"while":37,"MIENTRAS":38,"if":39,"SI":40,"if_option0":41,"loop_if":42,"loop_if_option0":43,"\\t":44,"block_repetition_plus0":45,"!\\t":46,"instruccion":47,"instruccion_group0":48,"loop_block_repetition_plus0":49,"loop_instruccion":50,"loop_instruccion_group0":51,"var_declaration":52,"var_declaration_repetition0":53,"var_declaration_option0":54,"assign":55,"type":56,"return":57,"RETORNO":58,"return_option0":59,"function":60,"function_option0":61,"func_values":62,"+":63,"-":64,"*":65,"/":66,"%":67,"^":68,"!=":69,"<=":70,">=":71,"==":72,"<":73,">":74,"~":75,"&&":76,"||":77,"|&":78,"!":79,"STRING":80,"CHAR":81,"TRUE":82,"FALSE":83,"type_group0":84,"body_repetition0_group0":85,"++":86,"--":87,"SINO":88,"DETENER":89,"CONTINUAR":90,"BOOLEAN":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",10:"IMPORTAR",11:"ID",12:".",13:"\\n",15:"INCERTEZA",16:"DOUBLE",20:"(",22:")",23:":",25:"VOID",28:",",30:"PARA",31:"INT",32:"=",34:";",38:"MIENTRAS",40:"SI",44:"\\t",46:"!\\t",58:"RETORNO",63:"+",64:"-",65:"*",66:"/",67:"%",68:"^",69:"!=",70:"<=",71:">=",72:"==",73:"<",74:">",75:"~",76:"&&",77:"||",78:"|&",79:"!",80:"STRING",81:"CHAR",82:"TRUE",83:"FALSE",86:"++",87:"--",88:"SINO",89:"DETENER",90:"CONTINUAR",91:"BOOLEAN"},
productions_: [0,[3,3],[4,2],[9,5],[14,3],[5,1],[18,6],[18,7],[27,3],[27,1],[29,13],[37,6],[39,7],[42,7],[24,4],[47,2],[36,4],[50,2],[52,3],[55,3],[19,2],[57,2],[60,4],[62,3],[62,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[56,1],[7,0],[7,2],[8,0],[8,1],[85,1],[85,2],[17,0],[17,2],[21,0],[21,1],[26,0],[26,1],[35,1],[35,1],[41,0],[41,3],[43,0],[43,3],[45,1],[45,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[49,1],[49,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[53,0],[53,3],[54,0],[54,2],[59,0],[59,1],[61,0],[61,1],[84,1],[84,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 20:
this.$ = [$$[$0-1], $$[$0]];
break;
case 50:
this.$ = $$[$0];
break;
case 51: case 57: case 89:
this.$ = [];
break;
case 52: case 58: case 70: case 79:
$$[$0-1].push($$[$0]);
break;
case 69: case 78:
this.$ = [$$[$0]];
break;
case 90:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,51],{3:1,4:2,7:3}),{1:[3]},o($V1,[2,57],{5:4,17:5}),o($V1,[2,53],{8:6,9:7,14:8,10:[1,9],15:[1,10]}),{6:[1,11]},{6:[2,5],16:$V2,18:13,19:15,25:[1,16],31:$V3,52:14,56:17,80:$V4,81:$V5,84:18,85:12,91:$V6},o($V1,[2,2]),o($V0,[2,52]),o($V1,[2,54]),{11:[1,24]},{16:[1,25]},{1:[2,1]},o($V1,[2,58]),o($V1,[2,55]),{13:[1,26]},o($V7,$V8,{53:28,20:[1,27]}),{11:[1,29]},{11:[1,30]},{11:[2,50]},{11:[2,97]},{11:[2,98]},{11:[2,99]},{11:[2,100]},{11:[2,101]},{12:[1,31]},{13:[1,32]},o($V1,[2,56]),{16:$V2,19:35,21:33,22:[2,59],27:34,31:$V3,56:17,80:$V4,81:$V5,84:18,91:$V6},{13:[2,91],28:[1,37],32:[1,38],54:36},{20:[1,39]},o([13,20,22,28,32],[2,20]),{11:[1,40]},o($V1,[2,4]),{22:[1,41]},{22:[2,60],28:$V9},o($Va,[2,9]),{13:[2,18]},{11:[1,43]},{11:$Vb,20:$Vc,31:$Vd,33:44,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{16:$V2,19:35,22:[2,61],26:54,27:55,31:$V3,56:17,80:$V4,81:$V5,84:18,91:$V6},{13:[1,56]},{23:[1,57]},{16:$V2,19:58,31:$V3,56:17,80:$V4,81:$V5,84:18,91:$V6},o($V7,[2,90]),{13:[2,92],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{11:$Vb,20:$Vc,31:$Vd,33:75,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:76,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:77,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),{22:[1,78]},{22:[2,62],28:$V9},o($V0,[2,3]),{13:$VB,24:79},o($Va,[2,8]),{11:$Vb,20:$Vc,31:$Vd,33:81,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:82,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:83,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:84,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:85,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:86,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:87,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:88,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:89,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:90,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:91,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:92,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:93,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:94,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:95,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:96,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{22:[1,97],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},o($VC,[2,42],{69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VA,[2,43]),{23:[1,98]},o($V1,[2,6]),{44:[1,99]},o($VD,[2,26],{65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VD,[2,27],{65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VE,[2,28],{68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VE,[2,29],{68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VE,[2,30],{68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VE,[2,31],{68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,32],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,33],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,34],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,35],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,36],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,37],{76:$Vx,77:$Vy,78:$Vz}),o($VC,[2,38],{76:$Vx,77:$Vy,78:$Vz}),o($VA,[2,39]),o([13,22,28,34,63,64,65,66,67,68,69,70,71,72,73,74,75,77],[2,40],{76:$Vx,78:$Vz}),o([13,22,28,34,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78],[2,41],{76:$Vx}),o($VA,[2,25]),{13:$VB,24:100},{11:$VF,16:$V2,19:111,29:107,30:$VG,31:$V3,37:108,38:$VH,39:109,40:$VI,45:101,47:102,48:103,52:104,55:105,56:17,57:106,58:$VJ,60:110,80:$V4,81:$V5,84:18,91:$V6},o($V1,[2,7]),{11:$VF,16:$V2,19:111,29:107,30:$VG,31:$V3,37:108,38:$VH,39:109,40:$VI,46:[1,117],47:118,48:103,52:104,55:105,56:17,57:106,58:$VJ,60:110,80:$V4,81:$V5,84:18,91:$V6},o($VK,[2,69]),{13:[1,119]},{13:[2,71]},{13:[2,72]},{13:[2,73]},{13:[2,74]},{13:[2,75]},{13:[2,76]},{13:[2,77]},o($V7,$V8,{53:28}),{20:[1,121],32:[1,120]},{11:$Vb,13:[2,93],20:$Vc,31:$Vd,33:123,59:122,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:[1,124]},{20:[1,125]},{20:[1,126]},o([6,13,16,25,31,80,81,88,91],[2,14]),o($VK,[2,70]),o($VK,[2,15]),{11:$Vb,20:$Vc,31:$Vd,33:127,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,22:[2,95],31:$Vd,33:130,61:128,62:129,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{13:[2,21]},{13:[2,94],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{31:[1,131]},{11:$Vb,20:$Vc,31:$Vd,33:132,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$Vb,20:$Vc,31:$Vd,33:133,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{13:[2,19],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{22:[1,134]},{22:[2,96],28:[1,135]},o($Va,[2,24],{63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),{11:[1,136]},{22:[1,137],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{22:[1,138],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{13:[2,22]},{11:$Vb,20:$Vc,31:$Vd,33:139,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{32:[1,140]},{23:[1,141]},{23:[1,142]},o($Va,[2,23],{63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),{11:$Vb,20:$Vc,31:$Vd,33:143,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{13:$VL,36:144},{13:$VB,24:146},{34:[1,147],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{13:[2,11]},{44:[1,148]},{13:[2,65],41:149,88:[1,150]},{11:$Vb,20:$Vc,31:$Vd,33:151,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:$VF,16:$V2,19:111,29:158,30:$VG,31:$V3,37:159,38:$VH,40:$VM,42:160,49:152,50:153,51:154,52:155,55:156,56:17,57:157,58:$VJ,60:161,80:$V4,81:$V5,84:18,89:$VN,90:$VO,91:$V6},{13:[2,12]},{23:[1,165]},{34:[1,166],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{11:$VF,16:$V2,19:111,29:158,30:$VG,31:$V3,37:159,38:$VH,40:$VM,42:160,46:[1,167],50:168,51:154,52:155,55:156,56:17,57:157,58:$VJ,60:161,80:$V4,81:$V5,84:18,89:$VN,90:$VO,91:$V6},o($VP,[2,78]),{13:[1,169]},{13:[2,80]},{13:[2,81]},{13:[2,82]},{13:[2,83]},{13:[2,84]},{13:[2,85]},{13:[2,86]},{13:[2,87]},{13:[2,88]},{20:[1,170]},{13:$VB,24:171},{35:172,86:[1,173],87:[1,174]},o([13,88],[2,16]),o($VP,[2,79]),o($VP,[2,17]),{11:$Vb,20:$Vc,31:$Vd,33:175,64:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{13:[2,66]},{22:[1,176]},{22:[2,63]},{22:[2,64]},{22:[1,177],63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz},{23:[1,178]},{23:[1,179]},{13:$VL,36:180},{13:$VL,36:181},{13:[2,10]},{13:[2,67],43:182,88:[1,183]},{13:[2,13]},{23:[1,184]},{13:$VL,36:185},{13:[2,68]}],
defaultActions: {11:[2,1],18:[2,50],19:[2,97],20:[2,98],21:[2,99],22:[2,100],23:[2,101],36:[2,18],104:[2,71],105:[2,72],106:[2,73],107:[2,74],108:[2,75],109:[2,76],110:[2,77],122:[2,21],134:[2,22],144:[2,11],149:[2,12],155:[2,80],156:[2,81],157:[2,82],158:[2,83],159:[2,84],160:[2,85],161:[2,86],162:[2,87],163:[2,88],171:[2,66],173:[2,63],174:[2,64],180:[2,10],182:[2,13],185:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const SymbolsTable = require("src/containers/symbols-table").SymbolsTable;
const ErrorsTable = require("src/containers/report-errors").ErrorsTable;

const symbolsTable = new SymbolsTable();
const errors = new ErrorsTable();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.symbolsTable = symbolsTable;
    exports.errors = errors;
}

const addError = (message, type = 1, column = this.first_column, line = this.first_line) =>
    errors.addError({ message, type, column, line });

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

const indent = [0];

const addDedents = (tabs, token) => {
  const dedents = [...token];

  if (token && tabs < indent[0]) dedents.unshift('\n');
  
  while (tabs < indent[0]) {
    dedents.unshift('!\t');
    indent.shift();
  }

  if (dedents.length) return dedents;
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:
  console.log("indent");
                      const tabs = yy_.yytext.length;

                      if (tabs > indent[0]) {
                          indent.unshift(tabs);
                          return ['\t', '\n'];
                      }

                      return addDedents(tabs, ['\n']);
                   
break;
case 3:this.begin('comment');
break;
case 4:this.popState();
break;
case 5:this.popState();
break;
case 6:/* ignore */
break;
case 7:return 91;
break;
case 8:return 80;
break;
case 9:return 16;
break;
case 10:return 81;
break;
case 11:return 25;
break;
case 12:return 31;
break;
case 13:return 25;
break;
case 14:return 83;
break;
case 15:return 82;
break;
case 16:return 58;
break;
case 17:return 40;
break;
case 18:return 88;
break;
case 19:return 30;
break;
case 20:return 38;
break;
case 21:return 89;
break;
case 22:return 90;
break;
case 23:return 'MOSTRAR';
break;
case 24:return 10;
break;
case 25:return 15;
break;
case 26:return 86;
break;
case 27:return 87;
break;
case 28:return 63;
break;
case 29:return 64;
break;
case 30:return 65;
break;
case 31:return 66;
break;
case 32:return 67;
break;
case 33:return 68;
break;
case 34:return 69;
break;
case 35:return 70;
break;
case 36:return 71;
break;
case 37:return 72;
break;
case 38:return 73;
break;
case 39:return 74;
break;
case 40:return 75;
break;
case 41:return 76;
break;
case 42:return 77;
break;
case 43:return 78;
break;
case 44:return 79;
break;
case 45:return 32;
break;
case 46:return 28;
break;
case 47:return 22;
break;
case 48:return 20;
break;
case 49:return 23;
break;
case 50:return 12;
break;
case 51:return 34;
break;
case 52:return 13;
break;
case 53:return addDedents(0, ['\n']);
break;
case 54:this.begin('string');
break;
case 55:this.popState();
break;
case 56:return '_STRING';
break;
case 57:addError(`Se ingreso un salto de linea antes de cerrar el string.`, 0); return addDedents(0, ['EOF']);
break;
case 58:addError(`No se cerro la especificacion del string.`, 0); return addDedents(0, ['EOF']);
break;
case 59:this.begin('char');
break;
case 60:this.popState();
break;
case 61:return '_CHAR';
break;
case 62:return '_CHAR';
break;
case 63:addError(`Se ingreso un salto de linea en lugar de un caracter.`, 0); return addDedents(0, ['EOF']);
break;
case 64:addError(`No se termino la especificacion del caracter.`, 0); return addDedents(0, ['EOF']);
break;
case 65:return '_INT';
break;
case 66:return '_DOUBLE';
break;
case 67:return 11;
break;
case 68:return addDedents(0, ['EOF']);
break;
case 69:addError(`Token desconocido <<${yy_.yytext}>>.`, 0);
break;
}
},
rules: [/^(?:([ \r]|\b[ \t]+))/,/^(?:(!![^\n]*(\n|$)))/,/^(?:(\n\t+(?!([ ]*([\r\n]+|$)))))/,/^(?:''')/,/^(?:''')/,/^(?:$)/,/^(?:.)/,/^(?:\bBoolean\b)/,/^(?:\bString\b)/,/^(?:\bDouble\b)/,/^(?:\bChar\b)/,/^(?:\bVoid\b)/,/^(?:\bInt\b)/,/^(?:\bVoid\b)/,/^(?:\bfalse\b)/,/^(?:\btrue\b)/,/^(?:\bRetorno\b)/,/^(?:\bSi\b)/,/^(?:\bSino\b)/,/^(?:\bPara\b)/,/^(?:\bMientras\b)/,/^(?:\bDetener\b)/,/^(?:\bContinuar\b)/,/^(?:\bMostrar\b)/,/^(?:\bImportar\b)/,/^(?:\bincerteza\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:[-])/,/^(?:[*])/,/^(?:\/)/,/^(?:[%])/,/^(?:[\^])/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:[<])/,/^(?:[>])/,/^(?:[~])/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:[!])/,/^(?:[=])/,/^(?:[,])/,/^(?:[)])/,/^(?:[(])/,/^(?:[:])/,/^(?:[.])/,/^(?:[;])/,/^(?:\n([ \t]*\n)*)/,/^(?:\n\b)/,/^(?:["])/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:\n)/,/^(?:$)/,/^(?:['])/,/^(?:')/,/^(?:[^'\n])/,/^(?:[^'\n])/,/^(?:\n)/,/^(?:$)/,/^(?:([-]?([0-9]+)))/,/^(?:([-]?([-]?([0-9]+))\.[0-9]+))/,/^(?:([a-zA-Z_$ñ]+))/,/^(?:$)/,/^(?:.)/],
conditions: {"char":{"rules":[0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true},"string":{"rules":[0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,67,68,69],"inclusive":true},"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,59,65,66,67,68,69],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,59,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crlParser;
exports.Parser = crlParser.Parser;
exports.parse = function () { return crlParser.parse.apply(crlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}