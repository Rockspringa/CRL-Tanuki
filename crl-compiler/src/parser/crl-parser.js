/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[11,12,16,29,35,52,105,106,107,108],$V1=[11,12,16,29,35,105,106,107,108],$V2=[1,15],$V3=[1,11],$V4=[1,18],$V5=[1,16],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[12,29,35,105,106,107,108],$Va=[7,12,29,35,105,106,107,108],$Vb=[1,29],$Vc=[32,36,52],$Vd=[2,121],$Ve=[1,36],$Vf=[7,12,29,35,52,105,106,107,108],$Vg=[1,56],$Vh=[1,60],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,58],$Vm=[1,59],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,70],$Vr=[28,32],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[28,32,38,52,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VJ=[1,94],$VK=[12,29,35,52,105,106,107,108],$VL=[1,109],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,110],$VQ=[28,32,38,52,82,83,84,85,86,87],$VR=[12,34,35,42,44,55,77,105,106,107,108],$VS=[28,32,38,52,82,83],$VT=[28,32,38,52,82,83,84,85,86],$VU=[12,34,35,42,44,52,55,77,105,106,107,108],$VV=[1,160],$VW=[12,34,35,42,44,55,64,66,77,105,106,107,108],$VX=[1,184],$VY=[1,174],$VZ=[1,175],$V_=[12,34,35,42,44,52,55,64,66,77,105,106,107,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"header":5,"program_repetition_plus1":6,"EOF":7,"header_repetition0":8,"header_option0":9,"import":10,"IMPORTAR":11,"ID":12,".":13,"import_repetition_plus0":14,"uncertainty":15,"INCERTEZA":16,"DOUBLE_":17,"uncertainty_repetition_plus0":18,"body":19,"func_declaration":20,"block":21,"body_repetition0":22,"body_group0":23,"body_repetition_plus1":24,"declaration":25,"(":26,"params":27,")":28,"VOID":29,"func_declaration_option0":30,"func_param":31,",":32,"for":33,"PARA":34,"INT":35,"=":36,"exp":37,";":38,"for_group0":39,"loop_block":40,"while":41,"MIENTRAS":42,"if_normal":43,"SI":44,"if_normal_option0":45,"else_normal":46,"SINO":47,"if_loop":48,"if_loop_option0":49,"else_loop":50,":":51,"\\n":52,"\\t":53,"block_repetition_plus0":54,"!\\t":55,"instruction":56,"instruction_group0":57,"instruction_repetition_plus0":58,"instruction_group1":59,"loop_block_repetition_plus0":60,"loop_instruction":61,"loop_instruction_group0":62,"loop_instruction_repetition_plus0":63,"DETENER":64,"loop_instruction_repetition_plus1":65,"CONTINUAR":66,"loop_instruction_repetition_plus2":67,"loop_instruction_group1":68,"var_declaration":69,"var_declaration_repetition0":70,"var_declaration_option0":71,"extra_declare":72,"declaration_assign":73,"assign":74,"type":75,"return":76,"RETORNO":77,"return_option0":78,"function":79,"function_option0":80,"func_values":81,"+":82,"-":83,"*":84,"/":85,"%":86,"^":87,"==":88,"!=":89,"<":90,"<=":91,">":92,">=":93,"~":94,"&&":95,"||":96,"|&":97,"!":98,"value":99,"STRING_":100,"INT_":101,"CHAR_":102,"TRUE":103,"FALSE":104,"BOOLEAN":105,"CHAR":106,"DOUBLE":107,"STRING":108,"++":109,"--":110,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",11:"IMPORTAR",12:"ID",13:".",16:"INCERTEZA",17:"DOUBLE_",26:"(",28:")",29:"VOID",32:",",34:"PARA",35:"INT",36:"=",38:";",42:"MIENTRAS",44:"SI",47:"SINO",51:":",52:"\\n",53:"\\t",55:"!\\t",64:"DETENER",66:"CONTINUAR",77:"RETORNO",82:"+",83:"-",84:"*",85:"/",86:"%",87:"^",88:"==",89:"!=",90:"<",91:"<=",92:">",93:">=",94:"~",95:"&&",96:"||",97:"|&",98:"!",100:"STRING_",101:"INT_",102:"CHAR_",103:"TRUE",104:"FALSE",105:"BOOLEAN",106:"CHAR",107:"DOUBLE",108:"STRING",109:"++",110:"--"},
productions_: [0,[3,4],[5,2],[10,5],[15,3],[19,3],[19,2],[20,4],[20,5],[31,3],[31,1],[33,12],[41,5],[43,6],[46,2],[48,6],[50,2],[21,5],[56,2],[56,1],[40,5],[61,2],[61,2],[61,2],[61,1],[69,3],[72,2],[73,2],[74,3],[25,2],[76,2],[79,4],[81,3],[81,1],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,1],[37,1],[37,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[75,1],[75,1],[75,1],[75,1],[75,1],[4,0],[4,2],[6,1],[6,2],[8,0],[8,2],[9,0],[9,1],[14,1],[14,2],[18,1],[18,2],[22,0],[22,2],[23,1],[23,1],[24,1],[24,2],[27,0],[27,1],[30,0],[30,1],[39,1],[39,1],[45,0],[45,1],[49,0],[49,1],[54,1],[54,2],[57,1],[57,1],[57,1],[57,1],[58,1],[58,2],[59,1],[59,1],[59,1],[60,1],[60,2],[62,1],[62,1],[62,1],[62,1],[63,1],[63,2],[65,1],[65,2],[67,1],[67,2],[68,1],[68,1],[68,1],[70,0],[70,2],[71,0],[71,1],[78,0],[78,1],[80,0],[80,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
 yy.parseImport(`${$$[$0-3]}.${$$[$0-1]}`, _$[$0-4].first_column, _$[$0-4].first_line); 
break;
case 4:
 yy.compileInfo.symbolsTable.getSymbol(`__inc_${yy.compileInfo.filename}`, 0).data = new yy.CrlDouble(+$$[$0-1]); 
break;
case 5:
this.$ = yy.compileInfo.functionsTable.addFunction({...$$[$0-2], body: $$[$0-1]}, _$[$0-2].first_column, _$[$0-2].first_line);;
break;
case 6:
this.$ = $$[$0-1].execute();
break;
case 7:
this.$ = { ...$$[$0-3], params: $$[$0-1] ? $$[$0-1] : [] };
break;
case 8:
this.$ = { name: $$[$0-3], params: $$[$0-1] ? $$[$0-1] : [] };
break;
case 9: case 32:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 10: case 33: case 69: case 75: case 77: case 83: case 95: case 101: case 106: case 112: case 114: case 116:
this.$ = [$$[$0]];
break;
case 11:
this.$ = new yy.For(new yy.Declare({ type: 2, names: [$$[$0-8]], value: $$[$0-6] }, _$[$0-9].first_column, _$[$0-9].first_line), $$[$0-4], $$[$0-2] === "++", $$[$0]);;
break;
case 12:
this.$ = new yy.While($$[$0-2], $$[$0]);
break;
case 13:
this.$ = new yy.If($$[$0-3], $$[$0-1], $$[$0]);
break;
case 14: case 16: case 19: case 24: case 26: case 27: case 55:
this.$ = $$[$0];
break;
case 15:
this.$ = new yy.If($$[$0-3], $$[$0-1], $$[$0]);;
break;
case 17: case 18: case 20: case 21: case 34:
this.$ = $$[$0-1];
break;
case 22:
this.$ = new yy.Break();
break;
case 23:
this.$ = new yy.Continue();
break;
case 25:
this.$ = new yy.Declare({ type: $$[$0-2].type, names: [$$[$0-2].name].concat($$[$0-1]), value: $$[$0] }, _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 28:
this.$ = new yy.Assign($$[$0-2], $$[$0], _$[$0-2].first_column, _$[$0-2].first_line);
break;
case 29:
this.$ = {type: $$[$0-1], name: $$[$0]};
break;
case 30:
this.$ = new yy.Return($$[$0]);
break;
case 31:
this.$ = new yy.FunctionCall({name: $$[$0-3], params: $$[$0-1]}, _$[$0-3].first_column, _$[$0-3].first_line);
break;
case 35:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 0, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 36:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 1, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 37:
this.$ = new yy.Arithmetic(new yy.Value(0, 2, _$[$0-1].first_column, _$[$0-1].first_line), $$[$0], 1, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 38:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 2, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 39:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 3, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 40:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 4, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 41:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 5, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 42:
this.$ = new yy.Relational($$[$0-2], $$[$0], 0, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 43:
this.$ = new yy.Relational($$[$0-2], $$[$0], 1, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 44:
this.$ = new yy.Relational($$[$0-2], $$[$0], 2, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 45:
this.$ = new yy.Relational($$[$0-2], $$[$0], 3, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 46:
this.$ = new yy.Relational($$[$0-2], $$[$0], 4, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 47:
this.$ = new yy.Relational($$[$0-2], $$[$0], 5, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 48:
this.$ = new yy.Relational($$[$0-2], $$[$0], 6, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 49:
this.$ = new yy.Logics($$[$0-2], $$[$0], 0, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 50:
this.$ = new yy.Logics($$[$0-2], $$[$0], 1, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 51:
this.$ = new yy.Logics($$[$0-2], $$[$0], 2, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 52:
this.$ = new yy.Logics(new yy.Value(0, 0, _$[$0-1].first_column, _$[$0-1].first_line), $$[$0], 3, _$[$0-1].first_column, _$[$0-1].first_line);
break;
case 53:
this.$ = new yy.Value($$[$0], $$[$0].type, _$[$0].first_column, _$[$0].first_line);
break;
case 54:
this.$ = new yy.Reference($$[$0], _$[$0].first_column, _$[$0].first_line);
break;
case 56:
this.$ = new yy.CrlString($$[$0]);
break;
case 57:
this.$ = new yy.CrlInt(+$$[$0]);
break;
case 58:
this.$ = new yy.CrlDouble(+$$[$0]);
break;
case 59:
this.$ = new yy.CrlChar($$[$0]);
break;
case 60:
this.$ = new yy.CrlBool(1);
break;
case 61:
this.$ = new yy.CrlBool(0);
break;
case 62:
this.$ = 0;
break;
case 63:
this.$ = 1;
break;
case 64:
this.$ = 2;
break;
case 65:
this.$ = 3;
break;
case 66:
this.$ = 4;
break;
case 67: case 71: case 79: case 121:
this.$ = [];
break;
case 68: case 70: case 72: case 76: case 78: case 80: case 84: case 96: case 102: case 107: case 113: case 115: case 117: case 122:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,67],{3:1,4:2}),{1:[3]},o($V1,[2,71],{5:3,8:5,52:[1,4]}),{6:6,12:$V2,19:7,20:8,23:9,25:10,29:$V3,35:$V4,69:12,74:13,75:14,105:$V5,106:$V6,107:$V7,108:$V8},o($V0,[2,68]),o($V9,[2,73],{9:21,10:22,15:23,11:[1,24],16:[1,25]}),{7:[1,26],12:$V2,19:27,20:8,23:9,25:10,29:$V3,35:$V4,69:12,74:13,75:14,105:$V5,106:$V6,107:$V7,108:$V8},o($Va,[2,69]),{21:28,51:$Vb},{24:30,52:[1,31]},o($Vc,$Vd,{70:33,26:[1,32]}),{12:[1,34]},{52:[2,81]},{52:[2,82]},{12:[1,35]},{36:$Ve},{12:[2,62]},{12:[2,63]},{12:[2,64]},{12:[2,65]},{12:[2,66]},o($V9,[2,2]),o($V1,[2,72]),o($V9,[2,74]),{12:[1,37]},{17:[1,38]},{1:[2,1]},o($Va,[2,70]),o($Vf,[2,79],{22:39}),{52:[1,40]},o($Va,[2,6],{52:[1,41]}),o($Vf,[2,83]),{25:44,27:42,28:[2,85],31:43,35:$V4,75:14,105:$V5,106:$V6,107:$V7,108:$V8},{32:[1,48],36:[1,49],52:[2,123],71:45,72:46,73:47},{26:[1,50]},o([26,28,32,36,52],[2,29]),{12:$Vg,17:$Vh,26:$Vi,37:51,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{13:[1,64]},{18:65,52:[1,66]},o($Va,[2,5],{52:[1,67]}),{53:[1,68]},o($Vf,[2,84]),{28:[1,69]},{28:[2,86],32:$Vq},o($Vr,[2,10]),{52:[2,25]},o($Vc,[2,122]),{52:[2,124]},{12:[1,71]},{12:$Vg,17:$Vh,26:$Vi,37:72,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{25:44,28:[2,87],30:73,31:74,35:$V4,75:14,105:$V5,106:$V6,107:$V7,108:$V8},{52:[2,28],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{12:$Vg,17:$Vh,26:$Vi,37:91,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:92,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:93,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},o($VI,[2,53]),o($VI,[2,54],{26:$VJ}),o($VI,[2,55]),o($VI,[2,56]),o($VI,[2,57]),o($VI,[2,58]),o($VI,[2,59]),o($VI,[2,60]),o($VI,[2,61]),{12:[1,95]},o($V9,[2,4],{52:[1,96]}),o($VK,[2,77]),o($Vf,[2,80]),{12:$VL,25:108,33:105,34:$VM,35:$V4,41:106,42:$VN,43:107,44:$VO,54:97,56:98,57:99,59:100,69:101,74:102,75:14,76:103,77:$VP,79:104,105:$V5,106:$V6,107:$V7,108:$V8},{51:[2,7]},{25:114,35:$V4,75:14,105:$V5,106:$V6,107:$V7,108:$V8},o($Vc,[2,26]),{52:[2,27],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{28:[1,115]},{28:[2,88],32:$Vq},{12:$Vg,17:$Vh,26:$Vi,37:116,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:117,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:118,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:119,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:120,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:121,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:122,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:123,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:124,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:125,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:126,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:127,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:128,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:129,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:130,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:131,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{28:[1,132],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},o($VQ,[2,37],{88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VI,[2,52]),{12:$Vg,17:$Vh,26:$Vi,28:[2,127],37:135,79:57,80:133,81:134,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{14:136,52:[1,137]},o($VK,[2,78]),{12:$VL,25:108,33:105,34:$VM,35:$V4,41:106,42:$VN,43:107,44:$VO,55:[1,138],56:139,57:99,59:100,69:101,74:102,75:14,76:103,77:$VP,79:104,105:$V5,106:$V6,107:$V7,108:$V8},o($VR,[2,95]),{52:[1,141],58:140},o($VR,[2,19]),{52:[2,97]},{52:[2,98]},{52:[2,99]},{52:[2,100]},o($VR,[2,103]),o($VR,[2,104]),o($VR,[2,105]),o($Vc,$Vd,{70:33}),{26:$VJ,36:$Ve},{12:$Vg,17:$Vh,26:$Vi,37:143,52:[2,125],78:142,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{26:[1,144]},{26:[1,145]},{26:[1,146]},o($Vr,[2,9]),{51:[2,8]},o($VS,[2,35],{84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VS,[2,36],{84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VT,[2,38],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VT,[2,39],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VT,[2,40],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VT,[2,41],{87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($VQ,[2,42],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,43],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,44],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,45],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,46],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,47],{95:$VF,96:$VG,97:$VH}),o($VQ,[2,48],{95:$VF,96:$VG,97:$VH}),o($VI,[2,49]),o([28,32,38,52,82,83,84,85,86,87,88,89,90,91,92,93,94,96],[2,50],{95:$VF,97:$VH}),o([28,32,38,52,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97],[2,51],{95:$VF}),o($VI,[2,34]),{28:[1,147]},{28:[2,128],32:[1,148]},o($Vr,[2,33],{82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),o($V1,[2,3],{52:[1,149]}),o($V0,[2,75]),o([7,12,29,34,35,42,44,47,52,55,77,105,106,107,108],[2,17]),o($VR,[2,96]),o($VR,[2,18],{52:[1,150]}),o($VU,[2,101]),{52:[2,30]},{52:[2,126],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{35:[1,151]},{12:$Vg,17:$Vh,26:$Vi,37:152,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$Vg,17:$Vh,26:$Vi,37:153,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},o($VI,[2,31]),{12:$Vg,17:$Vh,26:$Vi,37:154,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},o($V0,[2,76]),o($VU,[2,102]),{12:[1,155]},{28:[1,156],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{28:[1,157],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},o($Vr,[2,32],{82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH}),{36:[1,158]},{40:159,51:$VV},{21:161,51:$Vb},{12:$Vg,17:$Vh,26:$Vi,37:162,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},o($VW,[2,12]),{52:[1,163]},o($VR,[2,91],{45:164,46:165,47:[1,166]}),{38:[1,167],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{53:[1,168]},o($VR,[2,13]),o($VR,[2,92]),{21:169,51:$Vb},{12:$Vg,17:$Vh,26:$Vi,37:170,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{12:$VL,25:108,33:181,34:$VM,35:$V4,41:182,42:$VN,44:$VX,48:183,60:171,61:172,62:173,64:$VY,66:$VZ,68:176,69:177,74:178,75:14,76:179,77:$VP,79:180,105:$V5,106:$V6,107:$V7,108:$V8},o($VR,[2,14]),{38:[1,185],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{12:$VL,25:108,33:181,34:$VM,35:$V4,41:182,42:$VN,44:$VX,48:183,55:[1,186],61:187,62:173,64:$VY,66:$VZ,68:176,69:177,74:178,75:14,76:179,77:$VP,79:180,105:$V5,106:$V6,107:$V7,108:$V8},o($VW,[2,106]),{52:[1,189],63:188},{52:[1,191],65:190},{52:[1,193],67:192},o($VW,[2,24]),{52:[2,108]},{52:[2,109]},{52:[2,110]},{52:[2,111]},o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),{26:[1,194]},{39:195,109:[1,196],110:[1,197]},o([12,34,35,42,44,47,55,64,66,77,105,106,107,108],[2,20]),o($VW,[2,107]),o($VW,[2,21],{52:[1,198]}),o($V_,[2,112]),o($VW,[2,22],{52:[1,199]}),o($V_,[2,114]),o($VW,[2,23],{52:[1,200]}),o($V_,[2,116]),{12:$Vg,17:$Vh,26:$Vi,37:201,79:57,83:$Vj,98:$Vk,99:55,100:$Vl,101:$Vm,102:$Vn,103:$Vo,104:$Vp},{28:[1,202]},{28:[2,89]},{28:[2,90]},o($V_,[2,113]),o($V_,[2,115]),o($V_,[2,117]),{28:[1,203],82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{40:204,51:$VV},{40:205,51:$VV},o($VW,[2,11]),o($VW,[2,93],{49:206,50:207,47:[1,208]}),o($VW,[2,15]),o($VW,[2,94]),{40:209,51:$VV},o($VW,[2,16])],
defaultActions: {12:[2,81],13:[2,82],16:[2,62],17:[2,63],18:[2,64],19:[2,65],20:[2,66],26:[2,1],45:[2,25],47:[2,124],69:[2,7],101:[2,97],102:[2,98],103:[2,99],104:[2,100],115:[2,8],142:[2,30],177:[2,108],178:[2,109],179:[2,110],180:[2,111],196:[2,89],197:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function addError(message, type = 1, item) {
    this.yy.compileInfo.errorsTable.addError({ message, type, column: item.first_column, line: item.first_line });
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

const addDedents = (tabs, token) => {
  while (tabs < this.yy.indents[0]) {
    this.yy.dedents.unshift('!\\t');
    this.yy.indents.shift();
  }

  if (token && !this.yy.eof) {
    this.yy.dedents.unshift('\\n');
    this.yy.dedents.push(token);
    this.yy.eof = token === 'EOF';
  }

  if (this.yy.dedents.length) {
    this.unput("←");
  }
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:
  if (this.yy.dedents.length) {
    this.unput("←");
    return this.yy.dedents.shift();
  }
                   
break;
case 3:
  const tabs = yy_.yytext.length;

  if (tabs > this.yy.indents[0]) {
    this.yy.indents.unshift(tabs);
    return '\\t';
  } else if (tabs < this.yy.indents[0]) {
    addDedents(tabs);
  }
                   
break;
case 4:this.pushState('comment');
break;
case 5:this.popState();
break;
case 6:this.popState(); addDedents(0, 'EOF');
break;
case 7:/**/
break;
case 8:/**/
break;
case 9:return 105;
break;
case 10:return 108;
break;
case 11:return 107;
break;
case 12:return 106;
break;
case 13:return 29;
break;
case 14:return 35;
break;
case 15:return 29;
break;
case 16:return 104;
break;
case 17:return 103;
break;
case 18:return 77;
break;
case 19:return 44;
break;
case 20:return 47;
break;
case 21:return 34;
break;
case 22:return 42;
break;
case 23:return 64;
break;
case 24:return 66;
break;
case 25:return 11;
break;
case 26:return 16;
break;
case 27:return 109;
break;
case 28:return 110;
break;
case 29:return 82;
break;
case 30:return 83;
break;
case 31:return 84;
break;
case 32:return 85;
break;
case 33:return 86;
break;
case 34:return 87;
break;
case 35:return 89;
break;
case 36:return 91;
break;
case 37:return 93;
break;
case 38:return 88;
break;
case 39:return 90;
break;
case 40:return 92;
break;
case 41:return 94;
break;
case 42:return 95;
break;
case 43:return 96;
break;
case 44:return 97;
break;
case 45:return 98;
break;
case 46:return 36;
break;
case 47:return 32;
break;
case 48:return 28;
break;
case 49:return 26;
break;
case 50:return 51;
break;
case 51:return 13;
break;
case 52:return 38;
break;
case 53:if (yy.indents[0]) addDedents(0); return '\\n';
break;
case 54:return '\\n';
break;
case 55:this.pushState('string');
break;
case 56:this.popState();
break;
case 57:return 100;
break;
case 58:addError.apply(this, [`Se ingreso un salto de linea antes de cerrar el string.`, 0, yy_.yylloc]);
break;
case 59:addError.apply(this, [`No se cerro la especificacion del string.`, 0, yy_.yylloc]); addDedents(0, 'EOF');
break;
case 60:this.pushState('char');
break;
case 61:this.popState();
break;
case 62:this.popState(); this.pushState('comment');
break;
case 63:return 102;
break;
case 64:return 102;
break;
case 65:addError.apply(this, [`Se ingreso un salto de linea en lugar de un caracter.`, 0, yy_.yylloc]); return 52;
break;
case 66:addError.apply(this, [`No se termino la especificacion del caracter.`, 0, yy_.yylloc]); addDedents(0, 'EOF');
break;
case 67:return 17;
break;
case 68:return 101;
break;
case 69:return 12;
break;
case 70:addDedents(0, 'EOF');
break;
case 71:addError.apply(this, [`Token desconocido <<${yy_.yytext}>>.`, 0, yy_.yylloc]);
break;
}
},
rules: [/^(?:([ \r]))/,/^(?:(!![^\n]*(\n|$)))/,/^(?:(←))/,/^(?:(\t+))/,/^(?:['])/,/^(?:''')/,/^(?:$)/,/^(?:[^']+)/,/^(?:'(?!''))/,/^(?:\bBoolean\b)/,/^(?:\bString\b)/,/^(?:\bDouble\b)/,/^(?:\bChar\b)/,/^(?:\bVoid\b)/,/^(?:\bInt\b)/,/^(?:\bVoid\b)/,/^(?:\bfalse\b)/,/^(?:\btrue\b)/,/^(?:\bRetorno\b)/,/^(?:\bSi\b)/,/^(?:\bSino\b)/,/^(?:\bPara\b)/,/^(?:\bMientras\b)/,/^(?:\bDetener\b)/,/^(?:\bContinuar\b)/,/^(?:\bImportar\b)/,/^(?:\bIncerteza\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:% )/,/^(?:\^)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:\n(?![\t\r\n]))/,/^(?:\n(?=[\t\r\n]))/,/^(?:["])/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:\n)/,/^(?:$)/,/^(?:['](?!''))/,/^(?:['](?!''))/,/^(?:''')/,/^(?:[^'\n])/,/^(?:[^'\n])/,/^(?:\n)/,/^(?:$)/,/^(?:(-?\d+\.\d+))/,/^(?:(-?\d+(?!\.)))/,/^(?:([a-zA-Z_$ñ][\w$ñ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"char":{"rules":[61,62,63,64,65,66],"inclusive":false},"string":{"rules":[56,57,58,59],"inclusive":false},"comment":{"rules":[5,6,7,8],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crlParser;
exports.Parser = crlParser.Parser;
exports.parse = function () { return crlParser.parse.apply(crlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}