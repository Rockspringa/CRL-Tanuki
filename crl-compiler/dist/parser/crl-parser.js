/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,13,18,31,37,62,116,117,118,119],$V1=[6,12,13,18,31,37,116,117,118,119],$V2=[1,14],$V3=[1,16],$V4=[1,22],$V5=[1,20],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[6,13,31,37,116,117,118,119],$Va=[1,33],$Vb=[1,37],$Vc=[34,38,62],$Vd=[2,214],$Ve=[2,13],$Vf=[6,13,31,37,62,116,117,118,119],$Vg=[1,60],$Vh=[1,56],$Vi=[1,57],$Vj=[1,58],$Vk=[1,62],$Vl=[1,63],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[2,61],$Vr=[2,28,30,34,38,62],$Vs=[2,6,13,31,36,37,44,46,53,62,65,87,116,117,118,119],$Vt=[1,88],$Vu=[1,89],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[1,96],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[2,30,34,40,62,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],$VK=[1,110],$VL=[1,113],$VM=[1,112],$VN=[2,30,34],$VO=[1,130],$VP=[1,129],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[1,139],$VU=[2,30,34,40,62,92,93,94,95,96,97],$VV=[2,13,36,37,44,46,65,87,116,117,118,119],$VW=[2,30,34,40,62,92,93],$VX=[2,30,34,40,62,92,93,94,95,96],$VY=[2,13,36,37,44,46,62,65,87,116,117,118,119],$VZ=[2,13,36,37,44,46,65,74,76,87,116,117,118,119],$V_=[1,211],$V$=[1,228],$V01=[2,13,36,37,44,46,53,65,74,76,87,116,117,118,119],$V11=[1,254],$V21=[1,253],$V31=[1,262],$V41=[1,250],$V51=[1,251],$V61=[2,13,36,37,44,46,62,65,74,76,87,116,117,118,119],$V71=[1,287];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"program_":5,"EOF":6,"header":7,"program__repetition_plus0":8,"header_repetition0":9,"header_option0":10,"import":11,"IMPORTAR":12,"ID":13,".":14,"import_repetition_plus0":15,"import_repetition_plus1":16,"uncertainty":17,"INCERTEZA":18,"uncertainty_group0":19,"uncertainty_repetition_plus0":20,"body":21,"func_declaration":22,"block":23,"body_repetition0":24,"body_group0":25,"body_repetition_plus1":26,"declaration":27,"(":28,"func_declaration_option0":29,")":30,"VOID":31,"func_declaration_option1":32,"func_param":33,",":34,"for":35,"PARA":36,"INT":37,"=":38,"exp":39,";":40,"for_group0":41,"loop_block":42,"while":43,"MIENTRAS":44,"if_normal":45,"SI":46,"if_normal_option0":47,"if_normal_option1":48,"if_normal_option2":49,"if_normal_option3":50,"if_normal_option4":51,"else_normal":52,"SINO":53,"if_loop":54,"if_loop_option0":55,"if_loop_option1":56,"if_loop_option2":57,"if_loop_option3":58,"if_loop_option4":59,"else_loop":60,":":61,"\\n":62,"\\t":63,"block_repetition_plus0":64,"!\\t":65,"instruction":66,"instruction_group0":67,"instruction_repetition_plus0":68,"instruction_group1":69,"loop_block_repetition_plus0":70,"loop_instruction":71,"loop_instruction_group0":72,"loop_instruction_repetition_plus0":73,"DETENER":74,"loop_instruction_repetition_plus1":75,"CONTINUAR":76,"loop_instruction_repetition_plus2":77,"loop_instruction_group1":78,"var_declaration":79,"var_declaration_repetition0":80,"var_declaration_option0":81,"extra_declare":82,"declaration_assign":83,"assign":84,"type":85,"return":86,"RETORNO":87,"return_option0":88,"function":89,"function_option0":90,"func_values":91,"+":92,"-":93,"*":94,"/":95,"%":96,"^":97,"==":98,"!=":99,"<":100,"<=":101,">":102,">=":103,"~":104,"&&":105,"||":106,"|&":107,"!":108,"value":109,"STRING_":110,"INT_":111,"DOUBLE_":112,"CHAR_":113,"TRUE":114,"FALSE":115,"BOOLEAN":116,"CHAR":117,"DOUBLE":118,"STRING":119,"++":120,"--":121,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"IMPORTAR",13:"ID",14:".",18:"INCERTEZA",28:"(",30:")",31:"VOID",34:",",36:"PARA",37:"INT",38:"=",40:";",44:"MIENTRAS",46:"SI",53:"SINO",61:":",62:"\\n",63:"\\t",65:"!\\t",74:"DETENER",76:"CONTINUAR",87:"RETORNO",92:"+",93:"-",94:"*",95:"/",96:"%",97:"^",98:"==",99:"!=",100:"<",101:"<=",102:">",103:">=",104:"~",105:"&&",106:"||",107:"|&",108:"!",110:"STRING_",111:"INT_",112:"DOUBLE_",113:"CHAR_",114:"TRUE",115:"FALSE",116:"BOOLEAN",117:"CHAR",118:"DOUBLE",119:"STRING",120:"++",121:"--"},
productions_: [0,[3,3],[3,2],[5,2],[5,1],[7,2],[11,5],[11,4],[11,3],[11,3],[17,3],[17,2],[21,3],[21,2],[21,2],[21,2],[21,2],[22,4],[22,5],[22,3],[22,4],[22,3],[22,2],[33,3],[33,1],[33,3],[33,2],[35,12],[35,10],[35,9],[35,8],[35,7],[35,6],[35,5],[35,4],[35,3],[35,2],[43,5],[43,5],[43,4],[43,3],[43,2],[45,6],[45,6],[45,5],[45,4],[45,3],[52,2],[52,2],[54,6],[54,6],[54,5],[54,4],[54,3],[60,2],[60,2],[23,5],[23,3],[23,2],[66,2],[66,1],[66,2],[66,1],[42,5],[42,3],[42,2],[71,2],[71,2],[71,2],[71,1],[71,2],[71,1],[79,3],[82,2],[82,2],[83,2],[83,2],[84,3],[84,3],[27,2],[27,2],[86,2],[89,4],[89,3],[91,3],[91,1],[91,3],[91,2],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,1],[39,1],[39,1],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[85,1],[85,1],[85,1],[85,1],[85,1],[4,0],[4,2],[8,1],[8,2],[9,0],[9,2],[10,0],[10,1],[15,1],[15,2],[16,1],[16,2],[19,1],[19,1],[20,1],[20,2],[24,0],[24,2],[25,1],[25,1],[26,1],[26,2],[29,0],[29,1],[32,0],[32,1],[41,1],[41,1],[47,0],[47,1],[48,0],[48,1],[49,0],[49,1],[50,0],[50,1],[51,0],[51,1],[55,0],[55,1],[56,0],[56,1],[57,0],[57,1],[58,0],[58,1],[59,0],[59,1],[64,1],[64,2],[67,1],[67,1],[67,1],[67,1],[68,1],[68,2],[69,1],[69,1],[69,1],[70,1],[70,2],[72,1],[72,1],[72,1],[72,1],[73,1],[73,2],[75,1],[75,2],[77,1],[77,2],[78,1],[78,1],[78,1],[80,0],[80,2],[81,0],[81,1],[88,0],[88,1],[90,0],[90,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 addError.apply({ yy }, ["No se pudo recuperar del error, las posibles causas son un ':' faltante de una funcion o un tipo, identificador, palabra clave faltante en el ambito global.", _$[$0-1]]); 
break;
case 4:
 addError.apply({ yy }, ["No se encontro el cuerpo del archivo.", _$[$0]]); 
break;
case 6:
 yy.parseImport(`${$$[$0-3]}.${$$[$0-1]}`, _$[$0-4].first_column + 1, _$[$0-4].first_line); 
break;
case 7:
 addError.apply({ yy }, ["Se esperaba la extension del archivo.", _$[$0]]); 
break;
case 8:
 addError.apply({ yy }, ["Se esperaba un punto entre el nombre del archivo y su extension.", _$[$0]]); 
break;
case 9:
 addError.apply({ yy }, ["Se esperaba un punto y su extension", _$[$0]]); 
break;
case 10:
 yy.compileInfo.symbolsTable.getSymbol(`__inc_${yy.compileInfo.filename}`, 0).data = new yy.CrlDouble(+$$[$0-1]); 
break;
case 11:
 addError.apply({ yy }, ["Se esperaba un valor numerico.", _$[$0]]); 
break;
case 12:
 if ($$[$0-2] && $$[$0-1]) yy.compileInfo.functionsTable.addFunction({ ...$$[$0-2], body: $$[$0-1]}, _$[$0-2].first_column + 1, _$[$0-2].first_line); 
break;
case 13:
 if ($$[$0-1]) $$[$0-1].execute() 
break;
case 14:
 addError.apply({ yy }, ["Se esperaba un signo igual.", _$[$0]]); 
break;
case 15:
 addError.apply({ yy }, ["Se esperaba un parentesis de apertura, una coma o un igual.", _$[$0]]); 
break;
case 16:
 addError.apply({ yy }, ["Se esperaba un signo de dos puntos.", _$[$0]]); 
break;
case 17:
this.$ = { ...$$[$0-3], params: $$[$0-1] || [] };
break;
case 18:
this.$ = { name: $$[$0-3], params: $$[$0-1] || [] };
break;
case 19: case 20:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de cierre o una lista de parametros.", _$[$0]]);
break;
case 21: case 36: case 40: case 41:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de apertura.", _$[$0]]);
break;
case 22:
this.$ = addError.apply({ yy }, ["Se esperaba un identificador", _$[$0]]);
break;
case 23: case 84:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 24: case 85: case 142: case 148: case 150: case 154: case 160: case 188: case 194: case 199: case 205: case 207: case 209:
this.$ = [$$[$0]];
break;
case 25:
this.$ = $$[$0-2]; addError.apply({ yy }, ["Se esperaba una tipo.", _$[$0]]);
break;
case 26:
this.$ = $$[$0-1]; addError.apply({ yy }, ["Se esperaba una coma.", _$[$0]]);
break;
case 27:
this.$ = ($$[$0]) ? new yy.For(new yy.Declare({ type: 2, names: [$$[$0-8]], value: $$[$0-6] }, _$[$0-9].first_column + 1, _$[$0-9].first_line), $$[$0-4], $$[$0-2] === "++", $$[$0]) : undefined;
break;
case 28:
this.$ = addError.apply({ yy }, ["Se esperaba '++' o un '--' seguidos por ')' y ':'", _$[$0]]);
break;
case 29:
this.$ = addError.apply({ yy }, ["Se esperaba un signo de punto y coma, un operador aritmetico, un operador de comparacion o un operador logico.", _$[$0]]);
break;
case 30: case 32: case 76: case 78: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128:
this.$ = addError.apply({ yy }, ["Se esperaba una expresion o un valor.", _$[$0]]);
break;
case 31:
this.$ = addError.apply({ yy }, ["Se esperaba un signo de punto y coma, un operador aritmetico, un operador de comparacion o un operador logico", _$[$0]]);
break;
case 33:
this.$ = addError.apply({ yy }, ["Se esperaba un signo de igual.", _$[$0]]);
break;
case 34: case 74: case 80:
this.$ = addError.apply({ yy }, ["Se esperaba un identificador.", _$[$0]]);
break;
case 35:
this.$ = addError.apply({ yy }, ["Se esperaba la palabra clave 'Int'.", _$[$0]]);
break;
case 37:
this.$ = ($$[$0]) ? new yy.While($$[$0-2], $$[$0]) : undefined;
break;
case 38: case 48: case 55:
this.$ = addError.apply({ yy }, ["Se esperaba un signo de dos puntos.", _$[$0]]);
break;
case 39:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de apertura, un operador aritmetico, un operador de comparacion o un operador logico.", _$[$0]]);
break;
case 42: case 49:
this.$ = ($$[$0-1]) ? new yy.If($$[$0-3], $$[$0-1], $$[$0]) : undefined;
break;
case 43: case 50:
this.$ = addError.apply({ yy }, ["Se esperaba un signo de dos puntos.", _$[$0-1]]);
break;
case 44: case 51:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de cierre, un operador aritmetico, un operador de comparacion o un operador logico.", _$[$0-1]]);
break;
case 45: case 52:
this.$ = addError.apply({ yy }, ["Se esperaba una expresion o un valor.", _$[$0-1]]);
break;
case 46: case 53:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de apertura.", _$[$0-1]]);
break;
case 47: case 54: case 60: case 69: case 73: case 75: case 109:
this.$ = $$[$0];
break;
case 56: case 59: case 63: case 66: case 88:
this.$ = $$[$0-1];
break;
case 57: case 64:
this.$ = addError.apply({ yy }, ["Se esperaba un nivel mas de identacion.", _$[$0]]);
break;
case 58: case 65:
this.$ = addError.apply({ yy }, ["Se esperaba un salto de linea.", _$[$0]]);
break;
case 61: case 70:
this.$ = addError.apply({ yy }, ["Se esperaba un signo igual o un parentesis de apertura.", _$[$0]]);
break;
case 62:
this.$ = addError.apply({ yy }, ["Se esperaba 'Para', 'Mientras', 'Si', 'Retorno', un identificador o un tipo.", _$[$0]]);
break;
case 67:
this.$ = new yy.Break();
break;
case 68:
this.$ = new yy.Continue();
break;
case 71:
this.$ = addError.apply({ yy }, ["Se esperaba 'Para', 'Mientras', 'Si', 'Retorno', 'Detener', 'Continuar', un identificador o un tipo.", _$[$0]]);
break;
case 72:
this.$ = new yy.Declare({ type: $$[$0-2].type, names: [$$[$0-2].name].concat($$[$0-1]), value: $$[$0] }, _$[$0-2].first_column + 1, _$[$0-2].first_line);
break;
case 77:
this.$ = new yy.Assign($$[$0-2], $$[$0], _$[$0-2].first_column + 1, _$[$0-2].first_line);
break;
case 79:
this.$ = {type: $$[$0-1], name: $$[$0]};
break;
case 81:
this.$ = new yy.Return($$[$0]);
break;
case 82:
this.$ = new yy.FunctionCall({name: $$[$0-3], params: $$[$0-1] || []}, _$[$0-3].first_column + 1, _$[$0-3].first_line);
break;
case 83:
this.$ = addError.apply({ yy }, ["Se esperaba un parentesis de cierre o una lista de expresiones o valores.", _$[$0]]);
break;
case 86:
this.$ = $$[$0-2]; addError.apply({ yy }, ["Se esperaba una expresion o un valor.", _$[$0]]);
break;
case 87:
this.$ = $$[$0-1]; addError.apply({ yy }, ["Se esperaba una coma, un operador aritmetico, un operador de comparacion o un operador logico..", _$[$0]]);
break;
case 89:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 0, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 90:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 1, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 91:
this.$ = new yy.Arithmetic(new yy.Value(0, 2, _$[$0-1].first_column + 1, _$[$0-1].first_line), $$[$0], 1, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 92:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 2, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 93:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 3, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 94:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 4, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 95:
this.$ = new yy.Arithmetic($$[$0-2], $$[$0], 5, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 96:
this.$ = new yy.Relational($$[$0-2], $$[$0], 0, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 97:
this.$ = new yy.Relational($$[$0-2], $$[$0], 1, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 98:
this.$ = new yy.Relational($$[$0-2], $$[$0], 2, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 99:
this.$ = new yy.Relational($$[$0-2], $$[$0], 3, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 100:
this.$ = new yy.Relational($$[$0-2], $$[$0], 4, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 101:
this.$ = new yy.Relational($$[$0-2], $$[$0], 5, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 102:
this.$ = new yy.Relational($$[$0-2], $$[$0], 6, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 103:
this.$ = new yy.Logics($$[$0-2], $$[$0], 0, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 104:
this.$ = new yy.Logics($$[$0-2], $$[$0], 1, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 105:
this.$ = new yy.Logics($$[$0-2], $$[$0], 2, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 106:
this.$ = new yy.Logics(new yy.Value(0, 0, _$[$0-1].first_column + 1, _$[$0-1].first_line), $$[$0], 3, _$[$0-1].first_column + 1, _$[$0-1].first_line);
break;
case 107:
this.$ = new yy.Value($$[$0], $$[$0].type, _$[$0].first_column + 1, _$[$0].first_line);
break;
case 108:
this.$ = new yy.Reference($$[$0], _$[$0].first_column + 1, _$[$0].first_line);
break;
case 129:
this.$ = new yy.CrlString($$[$0]);
break;
case 130:
this.$ = new yy.CrlInt(+$$[$0]);
break;
case 131:
this.$ = new yy.CrlDouble(+$$[$0]);
break;
case 132:
this.$ = new yy.CrlChar($$[$0].substring(1, $$[$0].length - 1));
break;
case 133:
this.$ = new yy.CrlBool(1);
break;
case 134:
this.$ = new yy.CrlBool(0);
break;
case 135:
this.$ = 0;
break;
case 136:
this.$ = 1;
break;
case 137:
this.$ = 2;
break;
case 138:
this.$ = 3;
break;
case 139:
this.$ = 4;
break;
case 140: case 144: case 156: case 214:
this.$ = [];
break;
case 141: case 143: case 145: case 149: case 151: case 155: case 157: case 161: case 189: case 195: case 200: case 206: case 208: case 210: case 215:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,140],{3:1,4:2,2:[1,3]}),{1:[3]},o($V1,[2,144],{5:4,7:6,9:7,62:[1,5]}),{6:[1,8]},{6:[1,9]},o($V0,[2,141]),{6:[2,4],8:10,13:$V2,21:11,22:12,25:13,27:15,31:$V3,37:$V4,79:17,84:18,85:19,116:$V5,117:$V6,118:$V7,119:$V8},o($V9,[2,146],{10:25,11:26,17:27,12:[1,28],18:[1,29]}),{1:[2,2]},{1:[2,1]},{6:[2,3],13:$V2,21:30,22:12,25:13,27:15,31:$V3,37:$V4,79:17,84:18,85:19,116:$V5,117:$V6,118:$V7,119:$V8},o($V9,[2,142]),{2:[1,32],23:31,61:$Va},{26:34,62:[1,35]},{2:[1,36],38:$Vb},o($Vc,$Vd,{80:40,2:[1,38],28:[1,39]}),{2:[1,42],13:[1,41]},{62:[2,158]},{62:[2,159]},{2:[1,44],13:[1,43]},o($Ve,[2,135]),o($Ve,[2,136]),o($Ve,[2,137]),o($Ve,[2,138]),o($Ve,[2,139]),o($V9,[2,5]),o($V1,[2,145]),o($V9,[2,147]),{13:[1,45]},{2:[1,47],19:46,111:[1,49],112:[1,48]},o($V9,[2,143]),o($Vf,[2,156],{24:50}),o($V9,[2,16]),{2:[1,52],62:[1,51]},o($V9,$Ve,{62:[1,53]}),o($Vf,[2,160]),o($V9,[2,14]),{2:[1,55],13:$Vg,28:$Vh,39:54,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($V9,[2,15]),{2:[1,69],27:71,29:68,30:[2,162],33:70,37:$V4,85:19,116:$V5,117:$V6,118:$V7,119:$V8},{34:[1,75],38:[1,76],62:[2,216],81:72,82:73,83:74},{2:[1,78],28:[1,77]},o($Vq,[2,22]),o($Vr,[2,79]),o($Vr,[2,80]),{2:[1,80],14:[1,79],16:81,62:[1,82]},{20:83,62:[1,84]},o($V9,[2,11]),{62:[2,152]},{62:[2,153]},o($V9,[2,12],{62:[1,85]}),{2:[1,87],63:[1,86]},o($Vs,[2,58]),o($Vf,[2,161]),{62:[2,77],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},{62:[2,78]},{2:[1,105],13:$Vg,28:$Vh,39:104,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,107],13:$Vg,28:$Vh,39:106,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,109],13:$Vg,28:$Vh,39:108,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VJ,[2,107]),o($VJ,[2,108],{28:$VK}),o($VJ,[2,109]),o($VJ,[2,129]),o($VJ,[2,130]),o($VJ,[2,131]),o($VJ,[2,132]),o($VJ,[2,133]),o($VJ,[2,134]),{30:[1,111]},o($Vq,[2,19]),{2:$VL,30:[2,163],34:$VM},o($VN,[2,24]),{62:[2,72]},o($Vc,[2,215]),{62:[2,217]},{2:[1,115],13:[1,114]},{2:[1,117],13:$Vg,28:$Vh,39:116,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,119],27:71,30:[2,164],32:118,33:120,37:$V4,85:19,116:$V5,117:$V6,118:$V7,119:$V8},o($Vq,[2,21]),{2:[1,122],13:[1,121]},o($V1,[2,8]),o($V1,[2,9],{62:[1,123]}),o($V0,[2,150]),o($V9,[2,10],{62:[1,124]}),o($Vf,[2,154]),o($Vf,[2,157]),{2:$VO,13:$VP,27:138,35:135,36:$VQ,37:$V4,43:136,44:$VR,45:137,46:$VS,64:125,66:126,67:127,69:128,79:131,84:132,85:19,86:133,87:$VT,89:134,116:$V5,117:$V6,118:$V7,119:$V8},o($Vs,[2,57]),{2:[1,144],13:$Vg,28:$Vh,39:143,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,146],13:$Vg,28:$Vh,39:145,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,148],13:$Vg,28:$Vh,39:147,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,150],13:$Vg,28:$Vh,39:149,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,152],13:$Vg,28:$Vh,39:151,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,154],13:$Vg,28:$Vh,39:153,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,156],13:$Vg,28:$Vh,39:155,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,158],13:$Vg,28:$Vh,39:157,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,160],13:$Vg,28:$Vh,39:159,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,162],13:$Vg,28:$Vh,39:161,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,164],13:$Vg,28:$Vh,39:163,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,166],13:$Vg,28:$Vh,39:165,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,168],13:$Vg,28:$Vh,39:167,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,170],13:$Vg,28:$Vh,39:169,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,172],13:$Vg,28:$Vh,39:171,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,174],13:$Vg,28:$Vh,39:173,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{30:[1,175],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VJ,[2,110]),o($VU,[2,91],{98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,128]),o($VJ,[2,106]),o($VJ,[2,127]),{2:[1,177],13:$Vg,28:$Vh,30:[2,220],39:179,89:61,90:176,91:178,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($Vq,[2,17]),{2:[1,181],27:180,37:$V4,85:19,116:$V5,117:$V6,118:$V7,119:$V8},o($VN,[2,26]),o($Vc,[2,73]),o($Vc,[2,74]),{62:[2,75],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},{62:[2,76]},{30:[1,182]},o($Vq,[2,20]),{2:$VL,30:[2,165],34:$VM},{15:183,62:[1,184]},o($V1,[2,7]),o($V0,[2,151]),o($Vf,[2,155]),{2:$VO,13:$VP,27:138,35:135,36:$VQ,37:$V4,43:136,44:$VR,45:137,46:$VS,65:[1,185],66:186,67:127,69:128,79:131,84:132,85:19,86:133,87:$VT,89:134,116:$V5,117:$V6,118:$V7,119:$V8},o($VV,[2,188]),{62:[1,188],68:187},o($VV,[2,60]),{2:[1,189],28:$VK,38:$Vb},o($VV,[2,62]),{62:[2,190]},{62:[2,191]},{62:[2,192]},{62:[2,193]},o($VV,[2,196]),o($VV,[2,197]),o($VV,[2,198]),o($Vc,$Vd,{80:40}),{13:$Vg,28:$Vh,39:191,62:[2,218],88:190,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},{2:[1,193],28:[1,192]},{2:[1,195],28:[1,194]},{2:[1,197],28:[1,196]},o($VW,[2,89],{94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,111]),o($VW,[2,90],{94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,112]),o($VX,[2,92],{97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,113]),o($VX,[2,93],{97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,114]),o($VX,[2,94],{97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,115]),o($VX,[2,95],{97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VJ,[2,116]),o($VU,[2,96],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,117]),o($VU,[2,97],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,118]),o($VU,[2,98],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,119]),o($VU,[2,99],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,120]),o($VU,[2,100],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,121]),o($VU,[2,101],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,122]),o($VU,[2,102],{105:$VG,106:$VH,107:$VI}),o($VJ,[2,123]),o($VJ,[2,103]),o($VJ,[2,124]),o([2,30,34,40,62,92,93,94,95,96,97,98,99,100,101,102,103,104,106],[2,104],{105:$VG,107:$VI}),o($VJ,[2,125]),o([2,30,34,40,62,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107],[2,105],{105:$VG}),o($VJ,[2,126]),o($VJ,[2,88]),{30:[1,198]},o($VJ,[2,83]),{2:[1,200],30:[2,221],34:[1,199]},o($VN,[2,85],{92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VN,[2,23]),o($VN,[2,25]),o($Vq,[2,18]),o($V1,[2,6],{62:[1,201]}),o($V0,[2,148]),o($Vs,[2,56]),o($VV,[2,189]),o($VV,[2,59],{62:[1,202]}),o($VY,[2,194]),o($VV,$Vq),{62:[2,81]},{62:[2,219],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},{2:[1,204],37:[1,203]},o($VZ,[2,36]),{2:[1,206],13:$Vg,28:$Vh,39:205,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VZ,[2,41]),{2:[1,208],13:$Vg,28:$Vh,39:207,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VV,[2,176],{51:209,52:210,53:$V_}),o($VJ,[2,82]),{2:[1,213],13:$Vg,28:$Vh,39:212,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VN,[2,87]),o($V0,[2,149]),o($VY,[2,195]),{2:[1,215],13:[1,214]},o($VZ,[2,35]),{2:[1,217],30:[1,216],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VZ,[2,40]),{2:[1,219],30:[1,218],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VV,[2,174],{50:220,52:221,53:$V_}),o($VV,[2,46]),o($VV,[2,177]),{2:[1,223],23:222,61:$Va},o($VN,[2,84],{92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI}),o($VN,[2,86]),{2:[1,225],38:[1,224]},o($VZ,[2,34]),{2:[1,227],42:226,61:$V$},o($VZ,[2,39]),{2:[1,230],23:229,61:$Va},o($VV,[2,172],{49:231,52:232,53:$V_}),o($VV,[2,45]),o($VV,[2,175]),o($VV,[2,47]),o($VV,[2,48]),{2:[1,234],13:$Vg,28:$Vh,39:233,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VZ,[2,33]),o($VZ,[2,37]),o($VZ,[2,38]),{2:[1,236],62:[1,235]},o($VV,[2,168],{47:237,52:238,53:$V_}),o($VV,[2,170],{48:239,52:240,53:$V_}),o($VV,[2,44]),o($VV,[2,173]),{2:[1,242],40:[1,241],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VZ,[2,32]),{2:[1,244],63:[1,243]},o($V01,[2,65]),o($VV,[2,42]),o($VV,[2,169]),o($VV,[2,43]),o($VV,[2,171]),{2:[1,246],13:$Vg,28:$Vh,39:245,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VZ,[2,31]),{2:$V11,13:$V21,27:138,35:259,36:$VQ,37:$V4,43:260,44:$VR,46:$V31,54:261,70:247,71:248,72:249,74:$V41,76:$V51,78:252,79:255,84:256,85:19,86:257,87:$VT,89:258,116:$V5,117:$V6,118:$V7,119:$V8},o($V01,[2,64]),{2:[1,264],40:[1,263],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VZ,[2,30]),{2:$V11,13:$V21,27:138,35:259,36:$VQ,37:$V4,43:260,44:$VR,46:$V31,54:261,65:[1,265],71:266,72:249,74:$V41,76:$V51,78:252,79:255,84:256,85:19,86:257,87:$VT,89:258,116:$V5,117:$V6,118:$V7,119:$V8},o($VZ,[2,199]),{62:[1,268],73:267},{62:[1,270],75:269},{62:[1,272],77:271},o($VZ,[2,69]),{2:[1,273],28:$VK,38:$Vb},o($VZ,[2,71]),{62:[2,201]},{62:[2,202]},{62:[2,203]},{62:[2,204]},o($VZ,[2,211]),o($VZ,[2,212]),o($VZ,[2,213]),{2:[1,275],28:[1,274]},{2:[1,277],41:276,120:[1,278],121:[1,279]},o($VZ,[2,29]),o($V01,[2,63]),o($VZ,[2,200]),o($VZ,[2,66],{62:[1,280]}),o($V61,[2,205]),o($VZ,[2,67],{62:[1,281]}),o($V61,[2,207]),o($VZ,[2,68],{62:[1,282]}),o($V61,[2,209]),o($VZ,[2,70]),{2:[1,284],13:$Vg,28:$Vh,39:283,89:61,93:$Vi,108:$Vj,109:59,110:$Vk,111:$Vl,112:$Vm,113:$Vn,114:$Vo,115:$Vp},o($VZ,[2,186],{59:285,60:286,53:$V71}),{30:[1,288]},o($VZ,[2,28]),{30:[2,166]},{30:[2,167]},o($V61,[2,206]),o($V61,[2,208]),o($V61,[2,210]),{2:[1,290],30:[1,289],92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG,106:$VH,107:$VI},o($VZ,[2,184],{58:291,60:292,53:$V71}),o($VZ,[2,53]),o($VZ,[2,187]),{2:[1,294],42:293,61:$V$},{42:295,61:$V$},{2:[1,297],42:296,61:$V$},o($VZ,[2,182],{57:298,60:299,53:$V71}),o($VZ,[2,52]),o($VZ,[2,185]),o($VZ,[2,54]),o($VZ,[2,55]),o($VZ,[2,27]),o($VZ,[2,178],{55:300,60:301,53:$V71}),o($VZ,[2,180],{56:302,60:303,53:$V71}),o($VZ,[2,51]),o($VZ,[2,183]),o($VZ,[2,49]),o($VZ,[2,179]),o($VZ,[2,50]),o($VZ,[2,181])],
defaultActions: {8:[2,2],9:[2,1],17:[2,158],18:[2,159],48:[2,152],49:[2,153],55:[2,78],72:[2,72],74:[2,217],117:[2,76],131:[2,190],132:[2,191],133:[2,192],134:[2,193],190:[2,81],255:[2,201],256:[2,202],257:[2,203],258:[2,204],278:[2,166],279:[2,167]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


function addError(message, item, type = 1) {
    this.yy.compileInfo.errorsTable.addError({ message, type, column: item.first_column + 1, line: item.first_line });
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

const addDedents = (tabs, token) => {
  while (tabs < this.yy.indents[0]) {
    this.yy.dedents.unshift('!\\t');
    this.yy.indents.shift();
  }

  if (token && !this.yy.eof) {
    this.yy.dedents.unshift('\\n');
    this.yy.dedents.push(token);
    this.yy.eof = token === 'EOF';
  }

  if (this.yy.dedents.length) {
    this.unput("←");
  }
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:
  if (this.yy.dedents.length) {
    this.unput("←");
    return this.yy.dedents.shift();
  }
                   
break;
case 3:
  const tabs = yy_.yytext.length;

  if (tabs > this.yy.indents[0]) {
    this.yy.indents.unshift(tabs);
    return '\\t';
  } else if (tabs < this.yy.indents[0]) {
    addDedents(tabs);
  }
                   
break;
case 4:this.pushState('comment');
break;
case 5:this.popState();
break;
case 6:this.popState(); addDedents(0, 'EOF');
break;
case 7:/**/
break;
case 8:/**/
break;
case 9:return 116;
break;
case 10:return 119;
break;
case 11:return 118;
break;
case 12:return 117;
break;
case 13:return 31;
break;
case 14:return 37;
break;
case 15:return 31;
break;
case 16:return 115;
break;
case 17:return 114;
break;
case 18:return 87;
break;
case 19:return 46;
break;
case 20:return 53;
break;
case 21:return 36;
break;
case 22:return 44;
break;
case 23:return 74;
break;
case 24:return 76;
break;
case 25:return 12;
break;
case 26:return 18;
break;
case 27:return 120;
break;
case 28:return 121;
break;
case 29:return 92;
break;
case 30:return 93;
break;
case 31:return 94;
break;
case 32:return 95;
break;
case 33:return 96;
break;
case 34:return 97;
break;
case 35:return 99;
break;
case 36:return 101;
break;
case 37:return 103;
break;
case 38:return 98;
break;
case 39:return 100;
break;
case 40:return 102;
break;
case 41:return 104;
break;
case 42:return 105;
break;
case 43:return 106;
break;
case 44:return 107;
break;
case 45:return 108;
break;
case 46:return 38;
break;
case 47:return 34;
break;
case 48:return 30;
break;
case 49:return 28;
break;
case 50:return 61;
break;
case 51:return 14;
break;
case 52:return 40;
break;
case 53:if (yy.indents[0]) addDedents(0); return '\\n';
break;
case 54:return '\\n';
break;
case 55:this.pushState('string');
break;
case 56:this.popState();
break;
case 57:return 110;
break;
case 58:addError.apply(this, [`Se ingreso un salto de linea antes de cerrar el string.`, yy_.yylloc, 0]);
break;
case 59:addError.apply(this, [`No se cerro la especificacion del string.`, yy_.yylloc, 0]); addDedents(0, 'EOF');
break;
case 60:return 113;
break;
case 61:return 113;
break;
case 62:return 112;
break;
case 63:return 111;
break;
case 64:return 13;
break;
case 65:addDedents(0, 'EOF');
break;
case 66:addError.apply(this, [`El token <<${yy_.yytext}>> no se reconocio dentro de la gramatica.`, yy_.yylloc, 0]);
break;
}
},
rules: [/^(?:([ \r]))/,/^(?:(!![^\n]*(\n|$)))/,/^(?:(←))/,/^(?:(\t+))/,/^(?:''')/,/^(?:''')/,/^(?:$)/,/^(?:[^']+)/,/^(?:'(?!''))/,/^(?:\bBoolean\b)/,/^(?:\bString\b)/,/^(?:\bDouble\b)/,/^(?:\bChar\b)/,/^(?:\bVoid\b)/,/^(?:\bInt\b)/,/^(?:\bVoid\b)/,/^(?:\bfalse\b)/,/^(?:\btrue\b)/,/^(?:\bRetorno\b)/,/^(?:\bSi\b)/,/^(?:\bSino\b)/,/^(?:\bPara\b)/,/^(?:\bMientras\b)/,/^(?:\bDetener\b)/,/^(?:\bContinuar\b)/,/^(?:\bImportar\b)/,/^(?:\bIncerteza\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:% )/,/^(?:\^)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\))/,/^(?:\()/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:\n(?![\t\r\n]))/,/^(?:\n(?=[\t\r\n]))/,/^(?:["])/,/^(?:["])/,/^(?:[^"\n]*)/,/^(?:\n)/,/^(?:$)/,/^(?:['].['])/,/^(?:[']\\[a-zA-Z'\]['])/,/^(?:(\d+\.\d+))/,/^(?:(\d+(?!\.)))/,/^(?:([a-zA-Z_$ñ][\w$ñ]*))/,/^(?:$)/,/^(?:[^\n\t ]+)/],
conditions: {"string":{"rules":[56,57,58,59],"inclusive":false},"comment":{"rules":[5,6,7,8],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crlParser;
exports.Parser = crlParser.Parser;
exports.parse = function () { return crlParser.parse.apply(crlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}